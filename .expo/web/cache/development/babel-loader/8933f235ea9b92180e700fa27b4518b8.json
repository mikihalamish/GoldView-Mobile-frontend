{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\hack\\\\Desktop\\\\GoldView-Mobile-frontend\\\\screens\\\\BreathingMachineScreen.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nimport axios from \"axios\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { Button, Overlay, Input } from \"react-native-elements\";\nimport { Card } from \"react-native-elements/dist/card/Card\";\nvar serverUrl = \"http://gold-view-server-goldview.apps.openforce.openforce.biz\";\n\nvar BreathingMachineScreen = function (_React$Component) {\n  _inherits(BreathingMachineScreen, _React$Component);\n\n  var _super = _createSuper(BreathingMachineScreen);\n\n  function BreathingMachineScreen(props) {\n    var _this;\n\n    _classCallCheck(this, BreathingMachineScreen);\n\n    _this = _super.call(this, props);\n\n    _this.loadVentsFromServer = function _callee() {\n      var res;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(axios.get(serverUrl + \"/ventilators/free\"));\n\n            case 2:\n              res = _context.sent;\n\n              if (res.status === 200) {\n                _this.setState({\n                  vents: res.data\n                });\n              }\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.save = function _callee2() {\n      var currentVent, id, res;\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              currentVent = _this.state.currentModalVent;\n              id = _this.state.id;\n              id = id.slice(0, 3) + \"-\" + id.slice(3, 5) + \"-\" + id.slice(5, 9);\n              console.log(id);\n              _context2.next = 6;\n              return _regeneratorRuntime.awrap(axios.patch(serverUrl + \"/ventilators\", {\n                serialNumber: _this.state.currentModalVent.serialNumber,\n                patient: {\n                  id: id\n                }\n              }));\n\n            case 6:\n              res = _context2.sent;\n              _context2.next = 9;\n              return _regeneratorRuntime.awrap(_this.loadVentsFromServer());\n\n            case 9:\n              _this.setState({\n                visible: false\n              });\n\n            case 10:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.toggleOverlay = function (vent) {\n      _this.setState({\n        visible: !_this.state.visible,\n        currentModalVent: _this.state.visible ? {} : vent,\n        id: \"\"\n      });\n    };\n\n    _this.renderListItem = function (vent) {\n      return React.createElement(TouchableOpacity, {\n        onPress: function onPress() {\n          return _this.toggleOverlay(vent);\n        },\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 7\n        }\n      }, React.createElement(Card, {\n        containerStyle: styles.listItem,\n        borderRadius: 30,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 9\n        }\n      }, React.createElement(Text, {\n        style: {\n          fontSize: 30,\n          textAlign: \"center\"\n        },\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }\n      }, vent.department.name), React.createElement(Text, {\n        style: {\n          fontSize: 20,\n          textAlign: \"center\",\n          fontWeight: \"100\"\n        },\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }\n      }, vent.serialNumber)));\n    };\n\n    _this.state = {\n      vents: {},\n      visible: false,\n      id: \"\",\n      currentModalVent: {},\n      idError: \"\"\n    };\n\n    _this.loadVentsFromServer();\n\n    return _this;\n  }\n\n  _createClass(BreathingMachineScreen, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(View, {\n        style: {\n          height: \"90%\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 7\n        }\n      }, React.createElement(Text, {\n        style: styles.title,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 9\n        }\n      }, \"Breathing Machine\"), React.createElement(FlatList, {\n        data: this.state.vents,\n        renderItem: function renderItem(_ref) {\n          var item = _ref.item;\n          return _this2.renderListItem(item);\n        },\n        keyExtractor: function keyExtractor(vent, index) {\n          return index.toString();\n        },\n        marginBottom: 0,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 9\n        }\n      }), React.createElement(Overlay, {\n        isVisible: this.state.visible,\n        onBackdropPress: this.toggleOverlay,\n        overlayStyle: styles.overlay,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 9\n        }\n      }, React.createElement(Text, {\n        style: {\n          textAlign: \"center\",\n          fontSize: 20,\n          marginVertical: 20\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }\n      }, \"Insert patient ID\"), React.createElement(Input, {\n        placeholder: \"Patient ID\",\n        onChangeText: function onChangeText(id) {\n          return _this2.setState({\n            id: id\n          });\n        },\n        keyboardType: \"number-pad\",\n        maxLength: 9,\n        value: this.state.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }\n      }), React.createElement(Button, {\n        title: \"SAVE\",\n        onPress: function onPress() {\n          return _this2.save();\n        },\n        style: {\n          marginBottom: 25,\n          marginHorizontal: \"auto\"\n        },\n        buttonStyle: {\n          paddingHorizontal: 30\n        },\n        disabled: this.state.id.length != 9,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }\n      })));\n    }\n  }]);\n\n  return BreathingMachineScreen;\n}(React.Component);\n\nvar styles = StyleSheet.create({\n  listItem: {\n    marginHorizontal: 30,\n    marginVertical: 20,\n    shadowRadius: 5,\n    padding: 15,\n    shadowColor: \"black\",\n    shadowOpacity: 0,\n    backgroundColor: \"#AEC6CF\",\n    borderRadius: 30,\n    borderWidth: 2,\n    borderColor: \"#496E7C\",\n    display: \"flex\",\n    color: \"#749DAD\",\n    justifyContent: \"center\"\n  },\n  title: {\n    fontSize: 30,\n    textAlign: \"center\",\n    marginVertical: 20,\n    fontWeight: \"bold\"\n  },\n  overlay: {\n    width: \"75%\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    paddingHorizontal: 30,\n    alignItems: \"center\"\n  }\n});\nexport default BreathingMachineScreen;","map":{"version":3,"sources":["C:/Users/hack/Desktop/GoldView-Mobile-frontend/screens/BreathingMachineScreen.js"],"names":["React","axios","Button","Overlay","Input","Card","serverUrl","BreathingMachineScreen","props","loadVentsFromServer","get","res","status","setState","vents","data","save","currentVent","state","currentModalVent","id","slice","console","log","patch","serialNumber","patient","visible","toggleOverlay","vent","renderListItem","styles","listItem","fontSize","textAlign","department","name","fontWeight","idError","height","title","item","index","toString","overlay","marginVertical","marginBottom","marginHorizontal","paddingHorizontal","length","Component","StyleSheet","create","shadowRadius","padding","shadowColor","shadowOpacity","backgroundColor","borderRadius","borderWidth","borderColor","display","color","justifyContent","width","alignItems"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport axios from \"axios\";\r\nimport {\r\n  View,\r\n  Text,\r\n  FlatList,\r\n  StyleSheet,\r\n  TouchableOpacity\r\n} from \"react-native\";\r\n\r\nimport { Button, Overlay, Input } from \"react-native-elements\";\r\nimport { Card } from \"react-native-elements/dist/card/Card\";\r\n\r\nconst serverUrl =\r\n  \"http://gold-view-server-goldview.apps.openforce.openforce.biz\";\r\n\r\nclass BreathingMachineScreen extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      vents: {},\r\n      visible: false,\r\n      id: \"\",\r\n      currentModalVent: {},\r\n      idError: \"\"\r\n    };\r\n    this.loadVentsFromServer();\r\n  }\r\n\r\n  loadVentsFromServer = async () => {\r\n    const res = await axios.get(`${serverUrl}/ventilators/free`);\r\n\r\n    if (res.status === 200) {\r\n      this.setState({ vents: res.data });\r\n    }\r\n  };\r\n\r\n  save = async () => {\r\n    // send request to the api\r\n    const currentVent = this.state.currentModalVent;\r\n    let id = this.state.id;\r\n    id = id.slice(0, 3) + \"-\" + id.slice(3, 5) + \"-\" + id.slice(5, 9);\r\n    console.log(id);\r\n    const res = await axios.patch(`${serverUrl}/ventilators`, {\r\n      serialNumber: this.state.currentModalVent.serialNumber,\r\n      patient: { id: id }\r\n    });\r\n\r\n    await this.loadVentsFromServer();\r\n    this.setState({ visible: false });\r\n  };\r\n\r\n  toggleOverlay = vent => {\r\n    this.setState({\r\n      visible: !this.state.visible,\r\n      currentModalVent: this.state.visible ? {} : vent,\r\n      id: \"\"\r\n    });\r\n  };\r\n\r\n  renderListItem = vent => {\r\n    return (\r\n      <TouchableOpacity onPress={() => this.toggleOverlay(vent)}>\r\n        <Card containerStyle={styles.listItem} borderRadius={30}>\r\n          <Text style={{ fontSize: 30, textAlign: \"center\" }}>\r\n            {vent.department.name}\r\n          </Text>\r\n          <Text\r\n            style={{\r\n              fontSize: 20,\r\n              textAlign: \"center\",\r\n              fontWeight: \"100\"\r\n            }}\r\n          >\r\n            {vent.serialNumber}\r\n          </Text>\r\n        </Card>\r\n      </TouchableOpacity>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <View style={{ height: \"90%\" }}>\r\n        <Text style={styles.title}>Breathing Machine</Text>\r\n        <FlatList\r\n          data={this.state.vents}\r\n          renderItem={({ item }) => this.renderListItem(item)}\r\n          keyExtractor={(vent, index) => index.toString()}\r\n          marginBottom={0}\r\n        />\r\n        <Overlay\r\n          isVisible={this.state.visible}\r\n          onBackdropPress={this.toggleOverlay}\r\n          overlayStyle={styles.overlay}\r\n        >\r\n          <Text\r\n            style={{ textAlign: \"center\", fontSize: 20, marginVertical: 20 }}\r\n          >\r\n            Insert patient ID\r\n          </Text>\r\n          <Input\r\n            placeholder=\"Patient ID\"\r\n            onChangeText={id => this.setState({ id: id })}\r\n            keyboardType=\"number-pad\"\r\n            maxLength={9}\r\n            value={this.state.id}\r\n          />\r\n          <Button\r\n            title=\"SAVE\"\r\n            onPress={() => this.save()}\r\n            style={{\r\n              marginBottom: 25,\r\n              marginHorizontal: \"auto\"\r\n            }}\r\n            buttonStyle={{ paddingHorizontal: 30 }}\r\n            disabled={this.state.id.length != 9}\r\n          />\r\n        </Overlay>\r\n      </View>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  listItem: {\r\n    marginHorizontal: 30,\r\n    marginVertical: 20,\r\n    shadowRadius: 5,\r\n    padding: 15,\r\n    shadowColor: \"black\",\r\n    shadowOpacity: 0,\r\n    backgroundColor: \"#AEC6CF\",\r\n    borderRadius: 30,\r\n    borderWidth: 2,\r\n    borderColor: \"#496E7C\",\r\n    display: \"flex\",\r\n    color: \"#749DAD\",\r\n    justifyContent: \"center\"\r\n  },\r\n  title: {\r\n    fontSize: 30,\r\n    textAlign: \"center\",\r\n    marginVertical: 20,\r\n    fontWeight: \"bold\"\r\n  },\r\n  overlay: {\r\n    width: \"75%\",\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    paddingHorizontal: 30,\r\n    alignItems: \"center\"\r\n  }\r\n});\r\n\r\nexport default BreathingMachineScreen;\r\n"]},"metadata":{},"sourceType":"module"}